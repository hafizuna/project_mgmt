generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  settings  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
  projects        Project[]
  users           User[]
  meetings        Meeting[]
  reportTemplates ReportTemplate[]
  weeklyPlans     WeeklyPlan[]
  weeklyReports   WeeklyReport[]
  reportReminders ReportReminder[]
  reportSettings  ReportSettings?
  notifications   Notification[]
  notificationTemplates NotificationTemplate[]
}

model User {
  id            String          @id @default(uuid())
  orgId         String
  email         String          @unique
  name          String
  password      String
  avatar        String?
  role          Role
  isActive      Boolean         @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  auditLogs     AuditLog[]
  projects      Project[]       @relation("ProjectOwner")
  memberships   ProjectMember[]
  assignedTasks Task[]          @relation("TaskAssignee")
  reportedTasks Task[]          @relation("TaskReporter")
  taskComments     TaskComment[]
  taskHistory      TaskHistory[]
  createdMeetings  Meeting[]          @relation("MeetingCreator")
  meetingAttendees MeetingAttendee[]
  actionItems      MeetingActionItem[]
  weeklyPlans      WeeklyPlan[]
  weeklyReports    WeeklyReport[]
  reportComments   ReportComment[]
  reportReminders  ReportReminder[]
  notifications    Notification[]
  notificationPreferences NotificationPreference?
  org              Organization       @relation(fields: [orgId], references: [id])
  sessions         UserSession[]
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  deviceInfo   Json?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String          @id @default(uuid())
  orgId       String
  ownerId     String
  name        String
  description String?
  startDate   DateTime?
  dueDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  settings    Json?
  status      ProjectStatus   @default(Active)
  budget      Float?
  priority    ProjectPriority @default(Medium)
  org         Organization    @relation(fields: [orgId], references: [id])
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  meetings    Meeting[]
  actionItems MeetingActionItem[]
}

model ProjectMember {
  id        String            @id @default(uuid())
  projectId String
  userId    String
  joinedAt  DateTime          @default(now())
  role      ProjectMemberRole @default(Member)
  project   Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model Task {
  id          String        @id @default(uuid())
  projectId   String
  title       String
  description String?
  assigneeId  String?
  reporterId  String
  estimate    Float?
  dueDate     DateTime?
  labels      String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  position    Int?
  status      TaskStatus    @default(Todo)
  priority    TaskPriority  @default(Medium)
  assignee    User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reporter    User                @relation("TaskReporter", fields: [reporterId], references: [id])
  comments    TaskComment[]
  history     TaskHistory[]
  actionItems MeetingActionItem[]
}

model AuditLog {
  id         String       @id @default(uuid())
  orgId      String
  userId     String
  action     String
  entityType String
  entityId   String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime     @default(now())
  org        Organization @relation(fields: [orgId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  @@index([orgId, createdAt])
  @@index([userId, createdAt])
  @@index([entityType, entityId])
}

model TaskComment {
  id        String        @id @default(uuid())
  content   String
  taskId    String
  authorId  String
  parentId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    User          @relation(fields: [authorId], references: [id])
  parent    TaskComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   TaskComment[] @relation("CommentReplies")
  task      Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskHistory {
  id          String            @id @default(uuid())
  taskId      String
  userId      String
  action      TaskHistoryAction
  field       String?
  oldValue    String?
  newValue    String?
  description String
  createdAt   DateTime          @default(now())
  task        Task              @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id])
}

enum Role {
  Admin
  Manager
  Team
}

enum ProjectStatus {
  Active
  Completed
  Archived
  OnHold
}

enum ProjectPriority {
  Low
  Medium
  High
  Critical
}

enum ProjectMemberRole {
  Owner
  Manager
  Member
}

enum TaskStatus {
  Todo
  InProgress
  Review
  Done
  OnHold
}

enum TaskPriority {
  Low
  Medium
  High
  Critical
}

enum TaskHistoryAction {
  CREATED
  UPDATED
  STATUS_CHANGED
  ASSIGNED
  UNASSIGNED
  COMMENT_ADDED
  DUE_DATE_CHANGED
  PRIORITY_CHANGED
  DESCRIPTION_CHANGED
  TITLE_CHANGED
}

model Meeting {
  id          String        @id @default(uuid())
  orgId       String
  projectId   String?       // Optional: project-specific meeting
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  
  // Meeting Type and Location
  type        MeetingType   @default(Online)
  location    String?       // Physical location for in-person meetings
  meetingLink String?       // Video conference URL for online meetings
  videoRoom   String?       // Generated video room ID for embedded video
  
  // Meeting Content
  agenda      Json?         // Structured agenda items
  notes       String?       // Meeting notes
  recording   String?       // Recording URL/path if available
  
  // Status and Metadata
  status      MeetingStatus @default(Scheduled)
  actualStartTime DateTime? // When meeting actually started
  actualEndTime   DateTime? // When meeting actually ended
  
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  org         Organization     @relation(fields: [orgId], references: [id])
  project     Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User             @relation("MeetingCreator", fields: [createdById], references: [id])
  attendees   MeetingAttendee[]
  actionItems MeetingActionItem[]
}

model MeetingAttendee {
  id               String         @id @default(uuid())
  meetingId        String
  userId           String
  isRequired       Boolean        @default(true)
  status           AttendeeStatus @default(Pending)
  respondedAt      DateTime?
  actuallyAttended Boolean?       // Did they actually attend
  
  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
  
  @@unique([meetingId, userId])
}

model MeetingActionItem {
  id          String            @id @default(uuid())
  meetingId   String
  description String
  assigneeId  String?
  dueDate     DateTime?
  status      ActionItemStatus  @default(Open)
  taskId      String?           // Link to created task
  projectId   String?           // Which project this relates to
  createdAt   DateTime          @default(now())
  
  // Relations
  meeting  Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  assignee User?    @relation(fields: [assigneeId], references: [id])
  task     Task?    @relation(fields: [taskId], references: [id])
  project  Project? @relation(fields: [projectId], references: [id])
}

enum MeetingType {
  Online      // Video conference (Jitsi, Zoom, etc.)
  InPerson    // Physical meeting room
  Hybrid      // Both online and in-person attendees
}

enum MeetingStatus {
  Scheduled
  InProgress
  Completed
  Cancelled
}

enum AttendeeStatus {
  Pending
  Accepted
  Declined
  Tentative
}

enum ActionItemStatus {
  Open
  InProgress
  Completed
}

// Weekly Reporting System Models
model ReportTemplate {
  id          String     @id @default(uuid())
  orgId       String
  name        String     // "Weekly Plan", "Weekly Report", etc.
  description String?
  type        ReportType
  sections    Json       // Dynamic sections configuration
  isActive    Boolean    @default(true)
  isDefault   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  org           Organization @relation(fields: [orgId], references: [id])
  weeklyPlans   WeeklyPlan[]
  weeklyReports WeeklyReport[]
  
  @@index([orgId, type])
}

model WeeklyPlan {
  id           String         @id @default(uuid())
  userId       String
  orgId        String
  templateId   String?
  weekStart    DateTime       // Monday of the week
  weekEnd      DateTime       // Sunday of the week
  
  // Plan Content
  goals        Json           // Array of weekly goals
  priorities   Json           // Priority tasks for the week
  timeAllocation Json         // Estimated time distribution
  focusAreas   Json           // Key focus areas
  blockers     Json?          // Anticipated blockers
  
  // Submission Status
  status       SubmissionStatus @default(Draft)
  submittedAt  DateTime?
  isOverdue    Boolean        @default(false)
  
  // Metadata
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  user         User           @relation(fields: [userId], references: [id])
  org          Organization   @relation(fields: [orgId], references: [id])
  template     ReportTemplate? @relation(fields: [templateId], references: [id])
  weeklyReport WeeklyReport?
  comments     ReportComment[]
  
  @@unique([userId, weekStart])
  @@index([orgId, weekStart])
  @@index([userId, status])
}

model WeeklyReport {
  id               String         @id @default(uuid())
  userId           String
  orgId            String
  templateId       String?
  weeklyPlanId     String         @unique
  weekStart        DateTime       // Monday of the week
  weekEnd          DateTime       // Sunday of the week
  
  // Report Content
  achievements     Json           // What was accomplished
  goalsProgress    Json           // Progress on planned goals
  actualTimeSpent  Json           // Actual time allocation
  blockers         Json?          // Encountered blockers
  support          Json?          // Support needed
  learnings        Json?          // Key learnings
  nextWeekPrep     Json?          // Next week preparation
  
  // Metrics
  productivityScore Float?        // Self-assessed productivity (1-10)
  satisfactionScore Float?        // Job satisfaction score (1-10)
  stressLevel       StressLevel?  // Stress level indicator
  
  // Submission Status
  status           SubmissionStatus @default(Draft)
  submittedAt      DateTime?
  isOverdue        Boolean        @default(false)
  reviewedBy       String?        // Admin/Manager who reviewed
  reviewedAt       DateTime?
  reviewNotes      String?
  
  // Metadata
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relations
  user             User           @relation(fields: [userId], references: [id])
  org              Organization   @relation(fields: [orgId], references: [id])
  template         ReportTemplate? @relation(fields: [templateId], references: [id])
  weeklyPlan       WeeklyPlan     @relation(fields: [weeklyPlanId], references: [id], onDelete: Cascade)
  comments         ReportComment[]
  
  @@index([orgId, weekStart])
  @@index([userId, status])
  @@index([reviewedBy, reviewedAt])
}

model ReportComment {
  id          String     @id @default(uuid())
  content     String
  authorId    String
  planId      String?
  reportId    String?
  parentId    String?    // For threaded replies
  isInternal  Boolean    @default(false) // Admin/Manager only comments
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  author       User            @relation(fields: [authorId], references: [id])
  plan         WeeklyPlan?     @relation(fields: [planId], references: [id], onDelete: Cascade)
  report       WeeklyReport?   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  parent       ReportComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies      ReportComment[] @relation("CommentReplies")
}

model ReportReminder {
  id          String       @id @default(uuid())
  userId      String
  orgId       String
  type        ReportType
  weekStart   DateTime
  reminderType ReminderType
  sentAt      DateTime
  isRead      Boolean      @default(false)
  
  // Relations
  user        User         @relation(fields: [userId], references: [id])
  org         Organization @relation(fields: [orgId], references: [id])
  
  @@index([userId, weekStart, type])
}

model ReportSettings {
  id                String   @id @default(uuid())
  orgId            String   @unique
  
  // Plan Settings
  planDueDay       Int      @default(1) // Monday = 1
  planDueTime      String   @default("10:00") // 10:00 AM
  planReminderDays Int[]    @default([0, 1]) // Sunday, Monday
  
  // Report Settings
  reportDueDay     Int      @default(5) // Friday = 5
  reportDueTime    String   @default("17:00") // 5:00 PM
  reportReminderDays Int[]  @default([3, 4, 5]) // Wed, Thu, Fri
  
  // Enforcement
  isEnforced       Boolean  @default(true)
  gracePeriodHours Int      @default(24)
  
  // Notifications
  emailNotifications    Boolean @default(true)
  inAppNotifications    Boolean @default(true)
  managerNotifications  Boolean @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  org              Organization @relation(fields: [orgId], references: [id])
}

enum ReportType {
  WeeklyPlan
  WeeklyReport
}

enum SubmissionStatus {
  Draft
  Submitted
  UnderReview
  Approved
  NeedsRevision
  Overdue
}

enum StressLevel {
  Low
  Medium
  High
  Critical
}

enum ReminderType {
  Initial
  FirstReminder
  FinalReminder
  Overdue
}

// Unified Notification System Models
model Notification {
  id          String           @id @default(uuid())
  userId      String
  orgId       String
  type        NotificationType
  category    NotificationCategory
  title       String
  message     String
  data        Json?            // Additional context data (IDs, metadata)
  
  // Related Entity Info
  entityType  String?          // Task, Project, Meeting, WeeklyReport, etc.
  entityId    String?          // ID of the related entity
  
  // Delivery & Status
  priority    NotificationPriority @default(Medium)
  isRead      Boolean          @default(false)
  readAt      DateTime?
  
  // Delivery Channels
  deliveredViaEmail    Boolean @default(false)
  deliveredViaApp      Boolean @default(true)
  deliveredViaPush     Boolean @default(false)
  
  // Email Delivery Status
  emailSentAt     DateTime?
  emailDelivered  Boolean? @default(false)
  emailError      String?
  
  // Scheduling
  scheduledFor    DateTime?        // For future delivery
  deliveredAt     DateTime?
  
  // Metadata
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  expiresAt   DateTime?        // Optional expiration
  
  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  org         Organization     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  queue       NotificationQueue[]
  logs        NotificationLog[]
  
  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([orgId, type, createdAt])
  @@index([scheduledFor])
  @@index([expiresAt])
}

model NotificationPreference {
  id          String   @id @default(uuid())
  userId      String   @unique
  orgId       String
  
  // Global Settings
  enableInApp         Boolean @default(true)
  enableEmail         Boolean @default(true)
  enablePush          Boolean @default(true)
  emailDigestFrequency EmailDigestFrequency @default(Daily)
  
  // Category Preferences  
  taskNotifications    Boolean @default(true)
  projectNotifications Boolean @default(true)
  meetingNotifications Boolean @default(true)
  reportNotifications  Boolean @default(true)
  systemNotifications  Boolean @default(true)
  
  // Email Preferences
  taskEmail           Boolean @default(true)
  projectEmail        Boolean @default(true)
  meetingEmail        Boolean @default(true)
  reportEmail         Boolean @default(true)
  systemEmail         Boolean @default(false)
  
  // Quiet Hours
  quietHoursEnabled   Boolean @default(false)
  quietHoursStart     String? // "22:00" format
  quietHoursEnd       String? // "08:00" format
  quietHoursTimezone  String? @default("UTC")
  
  // Weekend Settings
  enableWeekendsEmail Boolean @default(false)
  enableWeekendsApp   Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model NotificationTemplate {
  id          String           @id @default(uuid())
  orgId       String
  type        NotificationType
  category    NotificationCategory
  name        String
  description String?
  
  // Template Content
  titleTemplate   String       // "Task {{taskTitle}} is due tomorrow"
  messageTemplate String       // "Your task {{taskTitle}} in project {{projectName}} is due on {{dueDate}}"
  emailSubject    String?      // Email-specific subject
  emailTemplate   String?      // HTML email template
  
  // Template Variables (JSON schema of expected variables)
  variables   Json             // { "taskTitle": "string", "projectName": "string" }
  
  // Settings
  isActive    Boolean          @default(true)
  isDefault   Boolean          @default(false)
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  org         Organization     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  @@unique([orgId, type, name])
  @@index([orgId, type])
}

model NotificationQueue {
  id              String               @id @default(uuid())
  notificationId  String?
  
  // Queue Info
  type            NotificationType
  priority        NotificationPriority @default(Medium)
  scheduledFor    DateTime
  
  // Processing Status
  status          QueueStatus          @default(Pending)
  attempts        Int                  @default(0)
  maxAttempts     Int                  @default(3)
  lastAttemptAt   DateTime?
  nextAttemptAt   DateTime?
  
  // Error Handling
  error           String?
  errorDetails    Json?
  
  // Payload
  payload         Json                 // Full notification data
  
  // Metadata
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  processedAt     DateTime?
  
  // Relations
  notification    Notification?        @relation(fields: [notificationId], references: [id], onDelete: SetNull)
  
  @@index([scheduledFor, status])
  @@index([status, priority])
  @@index([type, status])
}

model NotificationLog {
  id              String               @id @default(uuid())
  notificationId  String
  
  // Delivery Info
  channel         NotificationChannel
  status          DeliveryStatus
  
  // Timestamps
  sentAt          DateTime?
  deliveredAt     DateTime?
  readAt          DateTime?
  
  // Error Info
  error           String?
  errorCode       String?
  
  // Metadata
  metadata        Json?                // Channel-specific metadata
  createdAt       DateTime             @default(now())
  
  // Relations
  notification    Notification         @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  @@index([notificationId])
  @@index([channel, status])
  @@index([sentAt])
}

// Notification Enums
enum NotificationType {
  // Task Related
  TASK_ASSIGNED
  TASK_DUE_SOON
  TASK_OVERDUE
  TASK_STATUS_CHANGED
  TASK_COMMENT_ADDED
  TASK_MENTION
  
  // Project Related
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_MEMBER_ADDED
  PROJECT_DEADLINE_APPROACHING
  
  // Meeting Related
  MEETING_SCHEDULED
  MEETING_REMINDER
  MEETING_CANCELLED
  MEETING_UPDATED
  MEETING_STARTING_SOON
  
  // Report Related
  WEEKLY_PLAN_DUE
  WEEKLY_PLAN_OVERDUE
  WEEKLY_REPORT_DUE
  WEEKLY_REPORT_OVERDUE
  REPORT_SUBMISSION_RECEIVED
  LOW_COMPLIANCE_ALERT
  
  // System Related
  SYSTEM_MAINTENANCE
  ACCOUNT_UPDATED
  SECURITY_ALERT
  WELCOME
  
  // General
  CUSTOM
}

enum NotificationCategory {
  TASK
  PROJECT
  MEETING
  REPORT
  SYSTEM
  SECURITY
}

enum NotificationPriority {
  Low
  Medium
  High
  Critical
}

enum NotificationChannel {
  IN_APP
  EMAIL
  PUSH
  SMS
}

enum DeliveryStatus {
  Pending
  Sent
  Delivered
  Failed
  Bounced
  Read
}

enum QueueStatus {
  Pending
  Processing
  Completed
  Failed
  Cancelled
}

enum EmailDigestFrequency {
  Never
  Immediate
  Hourly
  Daily
  Weekly
}
