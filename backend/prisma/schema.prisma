generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  settings  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
  projects  Project[]
  users     User[]
}

model User {
  id            String          @id @default(uuid())
  orgId         String
  email         String          @unique
  name          String
  password      String
  avatar        String?
  role          Role
  isActive      Boolean         @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  auditLogs     AuditLog[]
  projects      Project[]       @relation("ProjectOwner")
  memberships   ProjectMember[]
  assignedTasks Task[]          @relation("TaskAssignee")
  reportedTasks Task[]          @relation("TaskReporter")
  org           Organization    @relation(fields: [orgId], references: [id])
  sessions      UserSession[]
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  deviceInfo   Json?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String          @id @default(uuid())
  orgId       String
  ownerId     String
  name        String
  description String?
  startDate   DateTime?
  dueDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  settings    Json?
  status      ProjectStatus   @default(Active)
  budget      Float?
  priority    ProjectPriority @default(Medium)
  org         Organization    @relation(fields: [orgId], references: [id])
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
}

model ProjectMember {
  id        String            @id @default(uuid())
  projectId String
  userId    String
  joinedAt  DateTime          @default(now())
  role      ProjectMemberRole @default(Member)
  project   Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model Task {
  id          String       @id @default(uuid())
  projectId   String
  title       String
  description String?
  assigneeId  String?
  reporterId  String
  estimate    Float?
  dueDate     DateTime?
  labels      String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  position    Int?
  status      TaskStatus   @default(Todo)
  priority    TaskPriority @default(Medium)
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reporter    User         @relation("TaskReporter", fields: [reporterId], references: [id])
}

model AuditLog {
  id         String       @id @default(uuid())
  orgId      String
  userId     String
  action     String
  entityType String
  entityId   String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime     @default(now())
  org        Organization @relation(fields: [orgId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  @@index([orgId, createdAt])
  @@index([userId, createdAt])
  @@index([entityType, entityId])
}

enum Role {
  Admin
  Manager
  Team
}

enum ProjectStatus {
  Active
  Completed
  Archived
  OnHold
}

enum ProjectPriority {
  Low
  Medium
  High
  Critical
}

enum ProjectMemberRole {
  Owner
  Manager
  Member
}

enum TaskStatus {
  Todo
  InProgress
  Review
  Done
}

enum TaskPriority {
  Low
  Medium
  High
  Critical
}
